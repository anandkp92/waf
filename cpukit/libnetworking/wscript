
def build(ctx):
	kernel_source = []
	source = []

	# unused files?
	# ["libc/ether_addr.c", "libc/gethostname.c", "libc/inet_neta.c", "libc/inet_net_ntop.c", "libc/inet_net_pton.c", "libc/ns_addr.c", "libc/ns_ntoa.c"]

	source += [
		"lib/ftpfs.c",
		"lib/getprotoby.c",
		"lib/rtems_bsdnet_ntp.c",
		"lib/syslog.c",
		"lib/tftpDriver.c",
		"libc/base64.c",
		"libc/gethostbydns.c",
		"libc/gethostbyht.c",
		"libc/gethostbynis.c",
		"libc/gethostnamadr.c",
		"libc/getifaddrs.c",
		"libc/getnetbydns.c",
		"libc/getnetbyht.c",
		"libc/getnetbynis.c",
		"libc/getnetnamadr.c",
		"libc/getproto.c",
		"libc/getprotoent.c",
		"libc/getprotoname.c",
		"libc/getservbyname.c",
		"libc/getservbyport.c",
		"libc/getservent.c",
		"libc/herror.c",
		"libc/if_indextoname.c",
		"libc/if_nameindex.c",
		"libc/inet_addr.c",
		"libc/inet_lnaof.c",
		"libc/inet_makeaddr.c",
		"libc/inet_netof.c",
		"libc/inet_network.c",
		"libc/inet_ntoa.c",
		"libc/inet_ntop.c",
		"libc/inet_pton.c",
		"libc/linkaddr.c",
		"libc/map_v4v6.c",
		"libc/ns_name.c",
		"libc/ns_netint.c",
		"libc/ns_parse.c",
		"libc/ns_print.c",
		"libc/ns_ttl.c",
		"libc/nsap_addr.c",
		"libc/rcmd.c",
		"libc/recv.c",
		"libc/res_comp.c",
		"libc/res_data.c",
		"libc/res_debug.c",
		"libc/res_init.c",
		"libc/res_mkquery.c",
		"libc/res_mkupdate.c",
		"libc/res_query.c",
		"libc/res_send.c",
		"libc/res_stubs.c",
		"libc/res_update.c",
		"libc/send.c",
		"libc/strsep.c",
		"rtems/mkrootfs.c",
		"rtems/rtems_bootp.c",
		"rtems/rtems_bsdnet_malloc_starvation.c",
		"rtems/rtems_dhcp.c",
		"rtems/rtems_dhcp_failsafe.c",
		"rtems/rtems_malloc_mbuf.c",
		"rtems/rtems_mii_ioctl.c",
		"rtems/rtems_mii_ioctl_kern.c",
		"rtems/rtems_select.c",
	]

	kernel_source += [
		"kern/kern_mib.c",
		"kern/kern_subr.c",
		"kern/kern_sysctl.c",
		"kern/uipc_domain.c",
		"kern/uipc_mbuf.c",
		"kern/uipc_socket.c",
		"kern/uipc_socket2.c",
		"net/if.c",
		"net/if_ethersubr.c",
		"net/if_loop.c",
		"net/if_ppp.c",
		"net/ppp_tty.c",
		"net/radix.c",
		"net/raw_cb.c",
		"net/raw_usrreq.c",
		"net/route.c",
		"net/rtsock.c",
		"net/slcompress.c",
		"netinet/if_ether.c",
		"netinet/igmp.c",
		"netinet/in.c",
		"netinet/in_cksum.c",
		"netinet/in_pcb.c",
		"netinet/in_proto.c",
		"netinet/in_rmx.c",
		"netinet/ip_divert.c",
		"netinet/ip_fw.c",
		"netinet/ip_icmp.c",
		"netinet/ip_input.c",
		"netinet/ip_mroute.c",
		"netinet/ip_output.c",
		"netinet/raw_ip.c",
		"netinet/tcp_debug.c",
		"netinet/tcp_input.c",
		"netinet/tcp_output.c",
		"netinet/tcp_subr.c",
		"netinet/tcp_timer.c",
		"netinet/tcp_usrreq.c",
		"netinet/udp_usrreq.c",
		"nfs/bootp_subr.c",
		"rtems/rtems_glue.c",
		"rtems/rtems_showicmpstat.c",
		"rtems/rtems_showifstat.c",
		"rtems/rtems_showipstat.c",
		"rtems/rtems_showmbuf.c",
		"rtems/rtems_showroute.c",
		"rtems/rtems_showtcpstat.c",
		"rtems/rtems_showudpstat.c",
		"rtems/rtems_socketpair.c",
		"rtems/rtems_syscall.c",
		"rtems/sghostname.c"
	]

	libnetworking_defines=["__BSD_VISIBLE", "INET",
			       "NOPOLL", "NOSELECT",
			       "BOOTP_COMPAT", "NFS", "DIAGNOSTIC", "__RTEMS_HAVE_DECL_SIGALTSTACK__"]

	ctx.cpu.networking(
		kernel_source,
		alias="libnetworking",
		defines=libnetworking_defines + ["_KERNEL"],
		includes=["%s/cpukit/libnetworking" % ctx.srcnode.abspath()],
		features="src_include src_include_rtems")

	ctx.cpu.networking(
		source,
		alias="libnetworking",
		defines=libnetworking_defines,
		includes=["%s/cpukit/libnetworking" % ctx.srcnode.abspath()],
		features="src_include src_include_rtems")
